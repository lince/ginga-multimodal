AC_INIT(configure.in)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gingalssm, 0.11.2)

AC_LANG_CPLUSPLUS
AC_PROG_CXX([g++])
AM_PROG_LIBTOOL

CXXFLAGS="-fPIC $CXXFLAGS"
CFLAGS="-fPIC $CFLAGS"

# Bring additional directories where things might be found into our
# search path. I don't know why autoconf doesn't do this by default
for spfx in /usr/lib/ /usr/local/lib/ /usr/local/lib/ginga/ /usr/local/lib/ginga/iocontents; do
if test -d ${spfx}; then
LDFLAGS="-L${spfx} $LDFLAGS"
fi
done

for spfx in /usr/include/ /usr/local/include/ /usr/local/include/ginga/; do
if test -d ${spfx}; then
CPPFLAGS="-I${spfx} $CPPFLAGS"
fi
done

###########
# HEADERS #
###########

##################
# TeleMidia Util #
##################
AC_CHECK_HEADER([util/functions.h], [], AC_MSG_ERROR([

Couldn't find TeleMidia Util headers.
Please install TeleMidia Util Headers.

]))

###########
# NCL 3.0 #
###########
AC_CHECK_HEADER([ncl/Entity.h], [], AC_MSG_ERROR([

Couldn't find NCL 3.0 headers.
Please install NCL 3.0.

]))

#####################
# NCL 3.0 Converter #
#####################
#TODO: resolve header dependencies
#AC_CHECK_HEADER([], [], AC_MSG_ERROR([
#
#Couldn't find  headers.
#Please install .
#
#]))

##########################
# Ginga CC System Thread #
##########################
AC_CHECK_HEADER([system/thread/Thread.h], [], AC_MSG_ERROR([

Couldn't find Ginga CC System Thread headers.
Please install gingacc-system project.

]))

######################
# Ginga CC System IO #
######################
AC_CHECK_HEADER([system/io/interface/output/IWindow.h], [], AC_MSG_ERROR([

Couldn't find Ginga CC System IO headers.
Please install gingacc-system project.

]))


############################
# Ginga Common Core Player #
############################
AC_CHECK_HEADER([player/IPlayerListener.h], [], AC_MSG_ERROR([

Couldn't find Ginga Common Core Player headers.
Please install gingacc-player project.

]))


########
# LIBS #
########

##################
# TeleMidia Util #
##################
AC_HAVE_LIBRARY(telemidiautil, , AC_ERROR([

Couldn't find TeleMidia Util library.
Please install TeleMidia Util Library.

]))

###########
# NCL 3.0 #
###########
AC_HAVE_LIBRARY(ncl30, , AC_ERROR([

Couldn't find ncl30 library.
Please install NCL 3.0.

]))

##########################
# Ginga CC System Thread #
##########################
AC_HAVE_LIBRARY(gingaccsystemthread, , AC_ERROR([

Couldn't find Ginga CC System Thread library.
Please install Ginga CC System Thread Library.

]))

############################
# Ginga Common Core Player #
############################
AC_HAVE_LIBRARY(gingaccplayer, , AC_ERROR([

Couldn't find gingaccplayer library.
Please install Ginga Common Core Player.

]))

###############
# Tuner check #
###############
tuner=no
AC_ARG_ENABLE(tuner,
  [  --enable-tuner          build tuner [[default=no]]],
  enable_tuner="$enableval", enable_tuner=no)

if test x$enable_tuner = xyes; then
  AC_HAVE_LIBRARY(gingacctuner, [
      AC_CHECK_HEADER(tuner/ITuner.h,
        tuner=yes
        TUNER_LIBS='-lgingacctuner'
        AC_DEFINE(HAVE_TUNER, 1, [Define to 1 if you have Tuner support.]),
        AC_MSG_WARN([
****** gingacctuner headers not found -- Tuner support will not be built.]))
    ], [
      AC_MSG_WARN([
****** gingacctuner not found -- Tuner support will not be built.])
    ])
fi

AM_CONDITIONAL(TUNER, test x$tuner = xyes)
AC_SUBST(TUNER_LIBS)

###################
# TSPARSER check #
###################
tsparser=no
AC_ARG_ENABLE(tsparser,
  [  --enable-tsparser       build tsparser [[default=no]]],
  enable_tsparser="$enableval", enable_tsparser=no)

if test x$enable_tsparser = xyes; then
  AC_HAVE_LIBRARY(gingacctsparser, [
      AC_CHECK_HEADER(tsparser/ITSPacket.h,
        tsparser=yes
        TSPARSER_LIBS='-lgingacctsparser'
        AC_DEFINE(HAVE_TSPARSER, 1, [Def to 1 if you have TSParser support.]),
        AC_MSG_WARN([
****** Headers not found -- TS Parser support will not be built.]))
    ], [
      AC_MSG_WARN([
****** TS Parser not found -- TS Parser support will not be built.])
    ], -lgingacctuner)
fi

AM_CONDITIONAL(TSPARSER, test x$tsparser = xyes)
AC_SUBST(TSPARSER_LIBS)

###############
# DSMCC check #
###############
dataprocessing=no
AC_ARG_ENABLE(dataprocessing,
  [  --enable-dataprocessing build dataprocessing [[default=no]]],
  enable_dataprocessing="$enableval", enable_dataprocessing=no)

if test x$enable_dataprocessing = xyes; then
  AC_HAVE_LIBRARY(gingaccdataprocessing, [
      AC_CHECK_HEADER(dataprocessing/IDataProcessor.h,
        dataprocessing=yes
        DATAPROCESSING_LIBS='-lgingaccdataprocessing -lgingaccdataprocncledit -L/usr/local/lib/ginga/dp'
        AC_DEFINE(HAVE_DSMCC, 1, [Def to 1 if you have DataProcess support.]),
        AC_MSG_WARN([
*** Headers not found -- Data Processing support will not be built.]))
    ], [
      AC_MSG_WARN([
*** Data Processing not found -- Data Processing support will not be built.])
    ], -lgingacctsparser -lgingacctuner)
fi

AM_CONDITIONAL(DATAPROCESSING, test x$dataprocessing = xyes)
AC_SUBST(DATAPROCESSING_LIBS)

##############
# JAVA check #
##############
ncletplayer=no
AC_ARG_ENABLE(ncletplayer,
  [  --enable-ncletplayer    build nclet support [[default=no]]],
  enable_ncletplayer="$enableval", enable_ncletplayer=no)

if test x$enable_ncletplayer = xyes; then
      AC_CHECK_HEADER(player/NCLetPlayer.h,
        ncletplayer=yes
        NCLET_LIBS='-lgingaccplayer'
        AC_DEFINE(HAVE_NCLET, 1, [Def to 1 if you have nclet support.]),
        AC_MSG_WARN([
*** Header not found -- nclet support will not be built.]))
fi

AM_CONDITIONAL(NCLET, test x$ncletplayer = xyes)
AC_SUBST(NCLET_LIBS)

#############
# Ginga NCL #
#############
#AC_HAVE_LIBRARY(gingancl, , AC_ERROR([
#
#Couldn't find Ginga-NCL library.
#Please install gingancl project.
#
#]))

############################################
# Offering a non-componentized alternative #
############################################
components=yes
AC_ARG_ENABLE(components,
  [  --enable-components build project using components [[default=yes]]],
  enable_components="$enableval", enable_components=yes)

if test x$enable_components = xno; then
   COMPONENTS_LIBS='-lginganclaavpadapter -lginganclapppadapter \
    -lginganclchapadapter -lginganclimgpadapter -lgingancllkspadapter \
    -lginganclluapadapter -lginganclnclpadapter -lginganclpavpadapter \
    -lginganclpltpadapter -lginganclsubpadapter \
    -lncl30confrancl -lncl30confraxml \
    -lncl30connclncm -lncl30consmlncm -lgingaccdataprocncl -lgingacciccurlic \
    -lgingaccsysctsdfbav -lgingaccsysctsdfbf -lgingaccsysctsfs \
    -lgingaccsysctsimgdfb -ltelemidialinks \
    -lgingacccontextmanager -lgingaccdataprocessing -lgingaccic -lgingaccmd \
    -lgingaccplayer -lgingaccsystemio -lgingaccsystemiocodemap \
    -lgingaccsystemiodfb -lgingaccsystemthread -lgingacctsparser \
    -lgingacctuner -lgingancl \
    -lgingancladaptation -lgingancladapter -lginganclemconverter \
    -lginganclfocus -lginganclgfx -lginganclmd -lginganclmodel \
    -lginganclprefetch -lncl30 -lncl30converter -ltelemidiautil \
    -lgingaccplaani -lgingaccplaavp -lgingaccplacha -lgingaccplaimg \
    -lgingaccplalks -lgingaccplalua -lgingaccplapav -lgingaccplaplt \
    -lgingaccplasrt -lgingaccplatxt -lgingaccplawdg -llua \
    -lxerces-c -lxerces-depdom \
    -lcore -lxine -lfusionsound -ldirectfb -lmad -lfusion -ldirect \
    -L/usr/local/lib/ginga/ -L/usr/local/lib -L/usr/local/lib/ginga/cm/ \
    -L/usr/local/lib/ginga/iocontents/ -L/usr/local/lib/ginga/converters/ \
    -L/usr/local/lib/ginga/adapters/ -L/usr/local/lib/ginga/ic/ \
    -L/usr/local/lib/ginga/players/ -L/usr/local/lib/ginga/dp \
    -L/usr/local/lib/lua/5.1 -L/usr/local/lib/lua/5.1/socket'
   AC_DEFINE(HAVE_COMPSUPPORT, 0, [Def to 0 if you don't have Component support.])
   AC_MSG_WARN([*** Component support will not be built.])

else
   COMPONENTS_LIBS='-ldl -L/usr/local/lib/ -L/usr/local/lib/ginga/'
   AC_DEFINE(HAVE_COMPSUPPORT, 1, [Def to 1 if you have Component support.])
   AC_MSG_RESULT([*** Component support will be built.])
fi

AM_CONDITIONAL(COMPONENTS, test "$enable_components" = "no")
AC_SUBST(COMPONENTS_LIBS)


AC_OUTPUT(Makefile include/Makefile src/Makefile test/Makefile)

AC_MSG_RESULT([
Build options: 
  Module directory                    $MODULEDIR
  Ginga CC Tuner support              $tuner
  Ginga CC TS Parser                  $tsparser
  Ginga CC Data Processing            $dataprocessing
  Ginga CC Player With NCLET Support  $ncletplayer
])
